#!/bin/bash

# The first arg provided here will be used as command option
COMMAND=$1
set -e

case $COMMAND in

  setup)
    # Stop any running containers
    $0 stop

    # Ensure that UID variable exists and is exported
    export UID

    # Set an alias command, to simplify features access through
    # command-line.
    alias hangman='$PWD/scripts/hangman'

    # Build containers
    $0 clean   
    $0 build

    echo "Finished! \\o/"
    echo "Now run hangman help to get usage information"
  ;;

  deploy)
    echo "Deploying master into heroku..."
    git push heroku master
    echo "Done"
  ;;

  start)
    echo "Starting servers... "
    docker-compose up
    echo "Bye :)"
  ;;

  stop)
    echo -n "Stopping hangman servers... "
    docker-compose stop
    echo "Done."
  ;;

  clean)
    echo -n "Cleaning all containers... "
    docker-compose rm
    echo "Done"
  ;;

  build)
    # Attempts to build the docker containers. It will stand with
    # a production environment, and all other development needs
    # must override the default entrypoint
    #
    # This command returns if the build was not successful
    echo -n "Build the hangman game image... "
    docker-compose build --build-arg user_id=$UID hangman
    
    docker-compose run \
      --entrypoint '/bin/sh -c' hangman 'yarn install'
    echo "Done!"
  ;;

  console)
    docker-compose run \
      --entrypoint '/bin/sh' hangman
  ;;

  unit)
    docker-compose run \
      --entrypoint '/bin/sh -c' hangman "yarn unit ${@:2}"
  ;;


  # Default option, display help information
  *)
    echo "Invalid option. The allowed ones are:"
    echo "build          - Build hangman containers"
    echo "clean          - Kills all running containers and deletes them"
    echo "console        - Run the hangman console inside hangman container"
    echo "unit           - Runs test suites"
    echo "setup          - Setup the hangman project"
    echo "start          - Start the hangman"
    echo "stop           - Stop the hangman"
  ;;
esac
